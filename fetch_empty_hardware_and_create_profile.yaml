- hosts: localhost
  vars:
    - config: "{{ playbook_dir }}/{{ oneview_config }}"
    - server_profile_template_name: CentosTemplate
    - iso_url: 'http://10.188.191.33/iso/custom-CentOS-7-x86_64-DVD-1810.iso'
    - server_profile_name: AnsibleProfile
    - server_hardware_name: ""
    - ilo_ip_address: ""
    - session: ""
  tasks:
    - name: Fetch Server hardware type of Server profile template
      oneview_server_profile_template_facts:
        config: "{{ config }}"
        name: "{{ server_profile_template_name }}"
      delegate_to: localhost

    - name: Gather server hardware having no profiles
      oneview_server_hardware_facts:
        config: "{{ config }}"
        params:
          filter: 
            - serverProfileUri=null
            - serverHardwareTypeUri='{{ server_profile_templates[0].serverHardwareTypeUri }}'
            - status='OK'
      when: server_profile_templates|length > 0 
      delegate_to: localhost  
     
    - set_fact: 
        server_hardware_name: "{{ server_hardwares[0].name }}"
      when: server_hardwares|length > 0
    - set_fact:
        server_hardware_name_split: "{{ server_hardware_name.split(',') }}"
      when: server_hardwares|length > 0
    - set_fact:
        bay_name: "{{ server_hardware_name_split[1] }}"
      when: server_hardwares|length > 0
    - set_fact:
        server_profile_name: "{{ ( server_profile_name + bay_name )}}"
      when: server_hardwares|length > 0
    #- debug:
    #    msg: '{{ server_profile_name }}'

    - name: Create server profile from template
      oneview_server_profile:
        config: "{{ config }}"
        state: present
        data:
          name: "{{ server_profile_name }}"
          serverProfileTemplateName: "{{ server_profile_template_name }}"
          serverHardwareName: "{{ server_hardware_name }}"
      when: server_hardware_name != "" 
      delegate_to: localhost
    - debug: var=server_profile

    - name: Gather sso ilo url facts about a Server Hardware
      oneview_server_hardware_facts:
        config: "{{ config }}"
        name: "{{ server_hardware_name }}"
        options:
          - remoteConsoleUrl 
      when: server_hardware_name != "" 
      delegate_to: localhost
    - debug: 
        var: server_hardware_remote_console_url
    
    - set_fact: 
        remote_console_url: "{{ server_hardware_remote_console_url.remoteConsoleUrl }}"
      when: server_hardwares|length > 0
    - set_fact: 
        split_uri_session: "{{ remote_console_url.split('&') }}"
      when: server_hardwares|length > 0
    - set_fact: 
        ilo_ip_address: "{{ split_uri_session[0].split('=')[1] }}"
      when: server_hardwares|length > 0
    - set_fact: 
        session: "{{ split_uri_session[1].split('=')[1] }}"
      when: server_hardwares|length > 0

    - name: Mount virtual media
      mount_virtual_media_via_request:
        name: Mount the iso to ilo for instalaltion
        uri: "{{ ilo_ip_address }}"
        session_id: "{{ session }}"
        iso_url: "{{ iso_url }}"
        boot_on_next_server_reset: True
        disk_insert: True
      register: mount_status
      when: 
        - ilo_ip_address != ""
        - session != ""
      delegate_to: localhost
#    - debug: 
#        msg: '{{ mount_status.msg }}'

    - name: Power On the server hardware
      oneview_server_hardware:
        config: "{{ config }}"
        state: power_state_set
        data:
          name: "{{ server_hardware_name }}"
          powerStateData:
            powerState: "On"
            powerControl: "MomentaryPress"
      when: server_hardware_name != "" 
      delegate_to: localhost   

    - pause: minutes=35

    - name: Gather sso ilo url facts about a Server Hardware
      oneview_server_hardware_facts:
        config: "{{ config }}"
        name: "{{ server_hardware_name }}"
        options:
          - remoteConsoleUrl
      when: server_hardware_name != ""
      delegate_to: localhost
    - debug:
        var: server_hardware_remote_console_url

    - set_fact:
        remote_console_url: "{{ server_hardware_remote_console_url.remoteConsoleUrl }}"
      when: server_hardwares|length > 0
    - set_fact:
        split_uri_session: "{{ remote_console_url.split('&') }}"
      when: server_hardwares|length > 0
    - set_fact:
        ilo_ip_address: "{{ split_uri_session[0].split('=')[1] }}"
      when: server_hardwares|length > 0
    - set_fact:
        session: "{{ split_uri_session[1].split('=')[1] }}"
      when: server_hardwares|length > 0

    - name: Fetch ethernet details of the server
      get_network_ip_address:
        uri: "{{ ilo_ip_address }}"
        session_id: "{{ session }}"
      register: network_response
      when:
        - ilo_ip_address != ""
        - session != ""
      delegate_to: localhost
      until: network_response.stdout.find("FoundIPAddress") != -1
      retries: 5
      delay: 300
    - debug:
        msg: '{{ network_response }}'


    - set_fact:
        response: "{{ network_response.msg }}"
      when: network_response.stdout.find("FoundIPAddress") != -1

    - set_fact:
        ip_address: "{{ response.ip_address }}"
      when: network_response.stdout.find("FoundIPAddress") != -1

    - debug:
        msg: '{{ ip_address }}'
      when: network_response.stdout.find("FoundIPAddress") != -1

